@startuml

class Body{
  Body(Vec2 init_pos, Vec2 init_vel, 
  Vec2 init_accel, Float mass)
  pos: Vec2
  vel: Vec2
  acc: Vec2
  mass: Float
  move_behav
  vel_display_behav
  body_display_behav
}

class Vec2{
  x: Float
  y: Float
  Vec2(int x, int y)
  __add__(Vec2 v): Vec2
  __sub__(Vec2 v): Vec2
  __mul__(Vec2 v): Vec2/Float
  __truediv__(Vec2 v): Vec2
  module(): Float
  set_module(Float mod): Void
  unit(): Vec2
  s_distance_between(Vec2 v1, Vec2 v2): Float
  s_angle_between(Vec2 v1, Vec2 v2): Float
  vsin(): Float
  vcos(): Float
  argument(): Float
  rotate(Float theta): Void
}

class RectBody{
  RectBody(Vec2 init_pos, Vec2 init_vel, Vec2 init_accel, 
  Float mass, Float Height, Float Width)

  height: Float
  width: Float
}

RectBody --|> Body

class CircleBody{
  RectBody(Vec2 init_pos, Vec2 init_vel, 
  Vec2 init_accel, Float mass, Float radius)

  radius: Float
}

CircleBody --|> Body

class TimeHandler{
  TimeHandler(Float fps)
  fps: Float
  ticks: Integer
  dDT: Float
  dT: Integer
  rDT: Float
  wait(): Void
}

class CollisionLogic{
  circle_circle_collision(CircleBody c1, 
  CircleBody c2): void
  circle_rect_collision(CircleBody c, 
  RectBody r): void
}

interface Iterator{
  //has_next()//
  //next()//
  //first()//
}

class BodyIterator{
  BodyIterator(list body_list)
  has_next(): Bool
  next(): Body
  first(): None
  index: Integer
  pairs: list
  len: Integer
}

BodyIterator --|> Iterator

interface MovementBehav {
  //move(rDT)//
}

class DoMove{
  DoMove(Body b)
  b: Body
  move(Float rDT): Void
}

DoMove --|> MovementBehav

class DontMove{
  move(Float rDT): Void
}

DontMove --|> MovementBehav

interface VelDisplayBehav {
  //move(rDT)//
}

class DoDisplayVel{
  DoDisplayVel(Surface surface, Body b)
  srfc: Surface
  b: Body
  display(Tuple color): Void
}

DoDisplayVel --|> VelDisplayBehav

class DontDisplayVel{
  display(Tuple color): Void
}

DontDisplayVel --|> VelDisplayBehav

interface BodyDisplayBehav{
  //display(color: tuple)//
}

class DisplayRect{
  DisplayRect(Surface surface, Body b)
  srfc: Surface
  b: Body
  display(Tuple color): Void
}

DisplayRect --|> BodyDisplayBehav

class DisplayCircle{
  DisplayCircle(Surface surface, Body b)
  srfc: Surface
  b: Body
  display(Tuple color): Void
}

DisplayCircle --|> BodyDisplayBehav

class App{
  App(int fps, int window_width, int window_height)
  running: Bool
  fps: Integer
  window_wdth: Integer
  window_height: Integer
  time_handler: TimeHandler
  body_item: BodyIterator
  circ_vtx_qty: Integer
  bodies: list
  init(): Void
  start_main_loop(): Void
  handle_events(): Void
  loop_bodies(): Void
}

Body --> Vec2
CollisionLogic --> CircleBody
CollisionLogic --> RectBody
DoMove --> Body
DoDisplayVel --> Body
DisplayRect --> Body
DisplayCircle --> Body

@enduml